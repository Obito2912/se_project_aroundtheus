!function(){"use strict";class e{constructor(e,t,s){let{name:n,link:i}=e;this._name=n,this._link=i,this._cardSelector=t,this._handleImageClick=s}_setEventListener(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardElement.querySelector(".card__trash-button").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}_handleDeleteCard(){this._cardElement.remove()}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageElement=this._cardElement.querySelector("#card-image"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._cardElement.querySelector("#card-title").textContent=this._name,this._setEventListener(),this._cardElement}}class t{constructor(e){this._element=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this.handleOverlayClick=this.handleOverlayClick.bind(this)}open(){this._element.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._element.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._element.querySelector(".modal__close").addEventListener("click",(()=>this.close())),this._element.addEventListener("click",this.handleOverlayClick)}handleOverlayClick(e){e.target.classList.contains("modal_opened")&&this.close()}}class s extends t{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._element.querySelector(".modal__form"),this._inputList=[...this._form.querySelectorAll(".modal__input")]}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._form.reset(),this.close()}))}}class n{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._modalButton=e.modalButton,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_toggleButtonState(e){this._hasInvalidInput(e)?this._disableSubmitButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_setEventListeners(){const e=[...this._form.querySelectorAll(this._inputSelector)];e.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState(e)}))})),this._toggleButtonState(e)}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._disableSubmitButton()})),this._setEventListeners()}}const i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",modalButton:".js-modal-button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},r=document.querySelector(".js-add-popup").querySelector(".js-add-card-form"),o=document.querySelector(".profile-edit-modal").querySelector(".modal__form"),a=document.querySelector("#add-button"),l=document.querySelector("#profile-edit-button"),c=new s(".profile-edit-modal",(e=>{_.setUserInfo({name:e.title,title:e.description})})),d=new s(".js-add-popup",(e=>{const t=u({name:e.title,link:e.link});m.addItem(t)})),m=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=u(e);m.addItem(t)}},"#cards-list");function u(t){return new e(t,"#card-template",v).getView()}const _=new class{constructor(e){let{nameSelector:t,descriptionSelector:s}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(s)}getUserInfo(){return{title:this._nameElement.textContent,description:this._descriptionElement.textContent}}setUserInfo(e){let{name:t,title:s}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=s}}({nameSelector:"#profile-title",descriptionSelector:"#profile-description"}),h=new n(i,o),p=new n(i,r),E=new class extends t{constructor(e){super(e),this._imageEl=this._element.querySelector("img"),this._captionEl=this._element.querySelector("figcaption")}open(e){let{link:t,name:s}=e;this._imageEl.src=t,this._imageEl.alt=s,this._captionEl.textContent=s,super.open()}}(".js-modal-popup-image");function v(e){E.open({link:e.link,name:e.name})}c.setEventListeners(),d.setEventListeners(),E.setEventListeners(),l.addEventListener("click",(()=>{const e=_.getUserInfo();c.setInputValues(e),c.open()})),a.addEventListener("click",(()=>{d.open()})),m.renderItems(),h.enableValidation(),p.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,